name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  actions: write
  contents: write
  pull-requests: write
  id-token: write

jobs:
  version-check:
    name: Check Version Changes
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      version: ${{ steps.version-check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed, will create release"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  release:
    name: Release and Publish
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should-release == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and format check
        run: |
          pnpm lint
          pnpm format:check

      - name: Build
        run: pnpm build

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Quality gates validation
        run: |
          echo "üîç Validating quality requirements..."
          
          # Check test coverage
          if [ -f "coverage/coverage-final.json" ]; then
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
              
              let totalStatements = 0;
              let coveredStatements = 0;
              
              Object.values(coverage).forEach(file => {
                const statements = file.s || {};
                const statementMap = file.statementMap || {};
                
                const fileStatements = Object.keys(statementMap).length;
                const fileCovered = Object.values(statements).filter(count => count > 0).length;
                
                totalStatements += fileStatements;
                coveredStatements += fileCovered;
              });
              
              const totalCoverage = totalStatements > 0 ? (coveredStatements / totalStatements) * 100 : 0;
              
              console.log('üìä Test coverage:', totalCoverage.toFixed(2) + '%');
              console.log('Covered statements:', coveredStatements);
              console.log('Total statements:', totalStatements);
              
              if (totalCoverage < 90) {
                console.error('‚ùå Coverage below 90% requirement');
                process.exit(1);
              }
              
              console.log('‚úÖ Coverage requirement met');
            "
          else
            echo "‚ö†Ô∏è Coverage report not found"
            exit 1
          fi
          
          # Validate zero-warning policy
          echo "üîç Checking for TypeScript warnings..."
          if ! pnpm tsc --noEmit; then
            echo "‚ùå TypeScript warnings found - violates zero-warning policy"
            exit 1
          fi
          
          echo "‚úÖ All quality gates passed"

      - name: Generate changelog excerpt
        id: changelog
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          # Extract changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            awk -v version="$VERSION" '
              /^## \[/ { 
                if (found) exit
                if ($0 ~ "\\[" version "\\]") found=1; next 
              }
              found && /^## \[/ { exit }
              found { print }
            ' CHANGELOG.md > changelog-excerpt.md
            
            if [ -s changelog-excerpt.md ]; then
              echo "Found changelog for version $VERSION"
            else
              echo "### Changes" > changelog-excerpt.md
              echo "See [CHANGELOG.md](./CHANGELOG.md) for details." >> changelog-excerpt.md
            fi
          else
            echo "### Changes" > changelog-excerpt.md
            echo "Initial release of vite-plugin-gas v$VERSION" >> changelog-excerpt.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: vite-plugin-gas v${{ needs.version-check.outputs.version }}
          body: |
            ## üì¶ Installation
            
            ```bash
            npm install vite-plugin-gas@${{ needs.version-check.outputs.version }}
            # or
            pnpm add vite-plugin-gas@${{ needs.version-check.outputs.version }}
            ```
            
            ## üîç Quality Metrics
            
            This release meets all quality requirements:
            - ‚úÖ **Zero Warning Policy**: No TypeScript or linting warnings
            - ‚úÖ **Test Coverage**: >90% code coverage achieved
            - ‚úÖ **Type Safety**: Strict TypeScript with no `any` types
            - ‚úÖ **camelCase Naming**: Consistent file naming convention
            
            ## üìã Changes
            
            ${{ steps.changelog.outputs.changes || 'See CHANGELOG.md for detailed changes in this release.' }}
          files: |
            dist/**/*
            README.md
            CHANGELOG.md
            package.json
          draft: false
          prerelease: ${{ contains(needs.version-check.outputs.version, 'alpha') || contains(needs.version-check.outputs.version, 'beta') || contains(needs.version-check.outputs.version, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build artifacts
        run: |
          echo "üì¶ Verifying build artifacts..."
          ls -la dist/
          echo "üìÑ Package information:"
          cat package.json | grep -E '"name"|"version"|"main"|"types"'
          echo "üîê NPM authentication check:"
          npm config get registry
          echo "Registry set to: $(npm config get registry)"

      - name: Publish to npm
        id: npm-publish
        run: |
          echo "üöÄ Publishing to npm..."
          
          # Check if NPM_TOKEN is available
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN is not set in repository secrets"
            echo "Please add NPM_TOKEN to repository secrets to enable npm publishing"
            exit 1
          fi
          
          # Verify npm authentication
          if npm whoami; then
            echo "‚úÖ NPM authentication successful - User: $(npm whoami)"
          else
            echo "‚ùå NPM authentication failed"
            echo "Current registry: $(npm config get registry)"
            echo "Please check NPM_TOKEN configuration"
            exit 1
          fi
          
          # Check if this version already exists
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if npm view vite-plugin-gas@$CURRENT_VERSION version 2>/dev/null; then
            echo "‚ö†Ô∏è Version $CURRENT_VERSION already exists on npm"
            echo "Existing versions:"
            npm view vite-plugin-gas versions --json
            exit 1
          fi
          
          # Publish with detailed logging
          echo "üì¶ Publishing vite-plugin-gas@$CURRENT_VERSION to npm..."
          if npm publish --provenance --access public --verbose; then
            echo "‚úÖ Package published successfully to npm"
            echo "üîó View package: https://www.npmjs.com/package/vite-plugin-gas/v/$CURRENT_VERSION"
          else
            echo "‚ùå Package publication failed"
            echo "Debugging information:"
            echo "Working directory: $(pwd)"
            echo "Package.json exists: $(test -f package.json && echo 'yes' || echo 'no')"
            echo "Dist directory exists: $(test -d dist && echo 'yes' || echo 'no')"
            ls -la dist/ || echo "No dist directory found"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update release notes
        run: |
          echo "üìù Release notes updated successfully"
          echo "NPM publish outcome: ${{ steps.npm-publish.outcome }}"
          if [ "${{ steps.npm-publish.outcome }}" = "success" ]; then
            echo "‚úÖ Package published to npm successfully"
            echo "üîó View package: https://www.npmjs.com/package/vite-plugin-gas/v/${{ needs.version-check.outputs.version }}"
          else
            echo "‚ö†Ô∏è NPM publishing may have failed - check logs above"
          fi
